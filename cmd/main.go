package main

import (
	"fmt"
	"log"
	"os"

	"gokb-embedder/internal/app"
	"gokb-embedder/internal/cli"
	"gokb-embedder/internal/config"
)

func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(os.Args) > 1 && os.Args[1] == "--quick" {
		// –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
		cfg, err := config.Load()
		if err != nil {
			log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
			log.Println("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ —Ñ–ª–∞–≥–∞ --quick –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
			log.Println("   ./gokb-embedder")
			log.Fatalf("–û—à–∏–±–∫–∞: %v", err)
		}

		// –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
		application := app.New(cfg)
		if err := application.Run(); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	cliInterface := cli.NewCLI()

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ–∫–∞ –±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
	application := app.New(nil)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª
	for {
		cfg, err := cliInterface.Run()
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ CLI: %v", err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		application.UpdateConfig(cfg)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
		switch cfg.OperationMode {
		case "statistics":
			// –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			if err := application.InitializeDatabase(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
				continue
			}
			if err := application.ShowDatabaseStatistics(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
			}
		case "preprocess":
			if err := application.RunPreprocess(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: %v", err)
			}
		case "embeddings_only":
			// –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ OpenAI
			if err := application.InitializeForEmbeddings(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
				continue
			}
			if err := application.GenerateEmbeddingsOnly(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤: %v", err)
			}
		case "full":
			if err := application.Run(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %v", err)
			}
		case "exit":
			// –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
			return
		default:
			if err := application.Run(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %v", err)
			}
		}

		// –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		// (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –≤—ã—Ö–æ–¥–∞)
		if cfg.OperationMode != "exit" {
			fmt.Println()
			fmt.Println("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
			fmt.Scanln() // –ñ–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è Enter
		}
	}
}
