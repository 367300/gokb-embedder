package cli

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"

	"gokb-embedder/internal/app"
	"gokb-embedder/internal/config"

	"github.com/fatih/color"
	"github.com/manifoldco/promptui"
)

// CLI –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
type CLI struct {
	config *config.Config
}

// NewCLI —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func NewCLI() *CLI {
	return &CLI{}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI
func (c *CLI) Run() (*config.Config, error) {
	color.Cyan("üöÄ GoKB Embedder - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ
	color.Yellow("üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --quick")
	color.Yellow("   ./gokb-embedder --quick")
	fmt.Println()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
	envExists := c.checkEnvFile()

	if envExists {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		cfg, err := config.Load()
		if err != nil {
			color.Yellow("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
			fmt.Println()
		} else {
			c.config = cfg
			color.Green("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞")
			fmt.Println()
		}
	} else {
		color.Yellow("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
		fmt.Println()
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	return c.showMainMenu()
}

// checkEnvFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
func (c *CLI) checkEnvFile() bool {
	if _, err := os.Stat(".env"); err == nil {
		return true
	}
	return false
}

// quickStart –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
func (c *CLI) quickStart() error {
	color.Cyan("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
	fmt.Println()
	color.Yellow("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GoKB Embedder —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
	fmt.Println()

	if c.config == nil {
		c.config = &config.Config{}
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if c.config.OpenAIAPIKey == "" {
		color.Yellow("üîë OpenAI API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
		prompt := promptui.Prompt{
			Label: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API Key",
			Mask:  '*',
		}
		apiKey, err := prompt.Run()
		if err != nil {
			return err
		}
		c.config.OpenAIAPIKey = apiKey
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	c.config.RootDir = "."
	c.config.DBPath = "embeddings.sqlite3"
	c.config.NCommits = 3
	c.config.TokenLimit = 1600
	c.config.LogLevel = "info"
	c.config.FileExtensions = []string{".py", ".js", ".php", ".md", ".yml", ".conf"}

	color.Green("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
	fmt.Printf("   üìÅ Root Directory: %s\n", c.config.RootDir)
	fmt.Printf("   üíæ Database Path: %s\n", c.config.DBPath)
	fmt.Printf("   üìö Number of Commits: %d\n", c.config.NCommits)
	fmt.Printf("   üî¢ Token Limit: %d\n", c.config.TokenLimit)
	fmt.Printf("   üìä Log Level: %s\n", c.config.LogLevel)
	fmt.Printf("   üìù File Extensions: %s\n", strings.Join(c.config.FileExtensions, ", "))
	fmt.Println()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
	if err := c.saveToEnv(); err != nil {
		return err
	}

	color.Green("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	color.Cyan("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
	color.Cyan("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")
	color.Cyan("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
	color.Cyan("   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–µ—Ä—ã")
	fmt.Println()
	return nil
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (c *CLI) showMainMenu() (*config.Config, error) {
	for {
		prompt := promptui.Select{
			Label: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
			Items: []string{
				"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
				"üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
				"üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–µ—Ä—ã",
				"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
				"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
				"üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV",
				"üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤",
				"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤",
				"‚ñ∂Ô∏è  –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ñ–∞–π–ª—ã + —ç–º–±–µ–¥–∏–Ω–≥–∏)",
				"‚ùå –í—ã—Ö–æ–¥",
			},
		}

		_, result, err := prompt.Run()
		if err != nil {
			return nil, err
		}

		switch result {
		case "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)":
			if err := c.quickStart(); err != nil {
				color.Red("‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: %v", err)
			}
		case "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é":
			if err := c.configureSettings(); err != nil {
				color.Red("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: %v", err)
			}
		case "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–µ—Ä—ã":
			if err := c.configureParsers(); err != nil {
				color.Red("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤: %v", err)
			}
		case "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
			c.showCurrentConfig()
		case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö":
			if c.config == nil {
				color.Red("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
				continue
			}
			c.config.OperationMode = "statistics"
			return c.config, nil
		case "üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV":
			if c.config == nil {
				color.Red("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
				continue
			}
			if err := c.exportToCSV(); err != nil {
				color.Red("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: %v", err)
			}
		case "üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤":
			if c.config == nil {
				color.Red("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
				continue
			}
			c.config.OperationMode = "preprocess"
			return c.config, nil
		case "üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤":
			if c.config == nil {
				color.Red("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
				continue
			}
			c.config.OperationMode = "embeddings_only"
			return c.config, nil
		case "‚ñ∂Ô∏è  –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ñ–∞–π–ª—ã + —ç–º–±–µ–¥–∏–Ω–≥–∏)":
			if c.config == nil {
				color.Red("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
				continue
			}
			c.config.OperationMode = "full"
			return c.config, nil
		case "‚ùå –í—ã—Ö–æ–¥":
			color.Yellow("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			c.config.OperationMode = "exit"
			return c.config, nil
		}
	}
}

// configureSettings –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
func (c *CLI) configureSettings() error {
	color.Cyan("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	fmt.Println()

	if c.config == nil {
		c.config = &config.Config{}
	}

	// OpenAI API Key
	color.Yellow("üîë OpenAI API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
	if c.config.OpenAIAPIKey == "" {
		prompt := promptui.Prompt{
			Label: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API Key",
			Mask:  '*',
		}
		apiKey, err := prompt.Run()
		if err != nil {
			return err
		}
		c.config.OpenAIAPIKey = apiKey
	} else {
		color.Green("‚úÖ OpenAI API Key —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
	}

	// Root Directory
	color.Yellow("üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
	prompt := promptui.Prompt{
		Label:   "–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞",
		Default: c.config.RootDir,
	}
	rootDir, err := prompt.Run()
	if err != nil {
		return err
	}
	c.config.RootDir = rootDir

	// Database Path
	color.Yellow("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
	prompt = promptui.Prompt{
		Label:   "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
		Default: c.config.DBPath,
	}
	dbPath, err := prompt.Run()
	if err != nil {
		return err
	}
	c.config.DBPath = dbPath

	// Number of Commits
	color.Yellow("üìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤")
	prompt = promptui.Prompt{
		Label:   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
		Default: strconv.Itoa(c.config.NCommits),
	}
	nCommitsStr, err := prompt.Run()
	if err != nil {
		return err
	}
	if nCommits, err := strconv.Atoi(nCommitsStr); err == nil {
		c.config.NCommits = nCommits
	}

	// Token Limit
	color.Yellow("üî¢ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤")
	prompt = promptui.Prompt{
		Label:   "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤",
		Default: strconv.Itoa(c.config.TokenLimit),
	}
	tokenLimitStr, err := prompt.Run()
	if err != nil {
		return err
	}
	if tokenLimit, err := strconv.Atoi(tokenLimitStr); err == nil {
		c.config.TokenLimit = tokenLimit
	}

	// Log Level
	color.Yellow("üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
	logPrompt := promptui.Select{
		Label: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
		Items: []string{"debug", "info", "warn", "error"},
	}
	_, logLevel, err := logPrompt.Run()
	if err != nil {
		return err
	}
	c.config.LogLevel = logLevel

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
	if err := c.saveToEnv(); err != nil {
		return err
	}

	color.Green("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
	fmt.Println()
	return nil
}

// configureParsers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä—ã
func (c *CLI) configureParsers() error {
	color.Cyan("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤")
	fmt.Println()

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
	availableParsers := map[string]map[string]string{
		".py": {
			"name":        "Python Parser",
			"description": "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–æ–¥—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –∏–∑ Python —Ñ–∞–π–ª–æ–≤",
			"features":    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤\n‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (docstrings)\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
			"parser":      "python",
		},
		".js": {
			"name":        "JavaScript Parser",
			"description": "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –º–µ—Ç–æ–¥—ã –∏ –∫–ª–∞—Å—Å—ã –∏–∑ JavaScript —Ñ–∞–π–ª–æ–≤",
			"features":    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ES6+ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞\n‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TypeScript",
			"parser":      "javascript",
		},
		".php": {
			"name":        "PHP Parser",
			"description": "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –º–µ—Ç–æ–¥—ã –∏ –∫–ª–∞—Å—Å—ã –∏–∑ PHP —Ñ–∞–π–ª–æ–≤",
			"features":    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –û–û–ü (–∫–ª–∞—Å—Å—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, —Ç—Ä–µ–π—Ç—ã)\n‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ namespace\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
			"parser":      "php",
		},
		".md": {
			"name":        "Markdown Parser",
			"description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ README —Ñ–∞–π–ª—ã",
			"features":    "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤",
			"parser":      "text",
		},
		".yml": {
			"name":        "YAML Parser",
			"description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã YAML",
			"features":    "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ü–∏—è–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª—é—á–µ–π\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
			"parser":      "text",
		},
		".yaml": {
			"name":        "YAML Parser",
			"description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã YAML",
			"features":    "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ü–∏—è–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª—é—á–µ–π\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
			"parser":      "text",
		},
		".conf": {
			"name":        "Config Parser",
			"description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
			"features":    "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ü–∏—è–º\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
			"parser":      "text",
		},
		".txt": {
			"name":        "Text Parser",
			"description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã",
			"features":    "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º\n‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
			"parser":      "text",
		},
	}

	// –¢–µ–∫—É—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	currentExtensions := make(map[string]bool)
	for _, ext := range c.config.FileExtensions {
		currentExtensions[ext] = true
	}

	color.Yellow("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
	fmt.Println()

	var selectedExtensions []string
	for ext, info := range availableParsers {
		isSelected := currentExtensions[ext]
		status := "‚ùå"
		if isSelected {
			status = "‚úÖ"
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Å–µ—Ä–µ
		color.Cyan("üìã %s %s", status, ext)
		fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", info["name"])
		fmt.Printf("   –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", info["description"])
		fmt.Printf("   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n%s\n", info["features"])
		fmt.Println()

		prompt := promptui.Select{
			Label: fmt.Sprintf("–°—Ç–∞—Ç—É—Å –¥–ª—è %s (%s):", ext, info["name"]),
			Items: []string{"‚úÖ –í–∫–ª—é—á–∏—Ç—å", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å"},
		}

		_, result, err := prompt.Run()
		if err != nil {
			return err
		}

		if strings.Contains(result, "–í–∫–ª—é—á–∏—Ç—å") {
			selectedExtensions = append(selectedExtensions, ext)
		}
	}

	c.config.FileExtensions = selectedExtensions

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	color.Green("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤:")
	pythonCount := 0
	javascriptCount := 0
	phpCount := 0
	textCount := 0
	for _, ext := range selectedExtensions {
		if availableParsers[ext]["parser"] == "python" {
			pythonCount++
		} else if availableParsers[ext]["parser"] == "javascript" {
			javascriptCount++
		} else if availableParsers[ext]["parser"] == "php" {
			phpCount++
		} else if availableParsers[ext]["parser"] == "text" {
			textCount++
		}
	}
	fmt.Printf("   üêç Python –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", pythonCount)
	fmt.Printf("   üü® JavaScript –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", javascriptCount)
	fmt.Printf("   üü¶ PHP –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", phpCount)
	fmt.Printf("   üìù Text –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", textCount)
	fmt.Printf("   üìÅ –í—Å–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: %d\n", len(selectedExtensions))
	fmt.Println()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
	if err := c.saveToEnv(); err != nil {
		return err
	}

	color.Green("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
	fmt.Println()
	return nil
}

// showCurrentConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (c *CLI) showCurrentConfig() {
	color.Cyan("üîç –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
	fmt.Println()

	if c.config == nil {
		color.Red("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
		fmt.Println()
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	issues := c.validateConfig()
	if len(issues) > 0 {
		color.Yellow("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
		for _, issue := range issues {
			color.Yellow("   ‚Ä¢ %s", issue)
		}
		fmt.Println()
	} else {
		color.Green("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
		fmt.Println()
	}

	fmt.Printf("üîë OpenAI API Key: %s\n", maskAPIKey(c.config.OpenAIAPIKey))
	fmt.Printf("üìÅ Root Directory: %s\n", c.config.RootDir)
	fmt.Printf("üíæ Database Path: %s\n", c.config.DBPath)
	fmt.Printf("üìö Number of Commits: %d\n", c.config.NCommits)
	fmt.Printf("üî¢ Token Limit: %d\n", c.config.TokenLimit)
	fmt.Printf("üìä Log Level: %s\n", c.config.LogLevel)
	fmt.Printf("üìù File Extensions: %s\n", strings.Join(c.config.FileExtensions, ", "))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤
	if len(c.config.FileExtensions) > 0 {
		fmt.Println()
		color.Cyan("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤:")
		pythonCount := 0
		javascriptCount := 0
		phpCount := 0
		textCount := 0
		for _, ext := range c.config.FileExtensions {
			if ext == ".py" {
				pythonCount++
			} else if ext == ".js" {
				javascriptCount++
			} else if ext == ".php" {
				phpCount++
			} else {
				textCount++
			}
		}
		fmt.Printf("   üêç Python –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", pythonCount)
		fmt.Printf("   üü® JavaScript –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", javascriptCount)
		fmt.Printf("   üü¶ PHP –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", phpCount)
		fmt.Printf("   üìù Text –ø–∞—Ä—Å–µ—Ä: %d —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n", textCount)
	}
	fmt.Println()
}

// validateConfig –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (c *CLI) validateConfig() []string {
	var issues []string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API Key
	if c.config.OpenAIAPIKey == "" {
		issues = append(issues, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OpenAI API Key")
	} else if len(c.config.OpenAIAPIKey) < 20 {
		issues = append(issues, "OpenAI API Key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if c.config.RootDir == "" {
		issues = append(issues, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	if len(c.config.FileExtensions) == 0 {
		issues = append(issues, "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
	if c.config.NCommits < 0 {
		issues = append(issues, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
	if c.config.TokenLimit < 100 {
		issues = append(issues, "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= 100)")
	} else if c.config.TokenLimit > 8000 {
		issues = append(issues, "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <= 8000)")
	}

	return issues
}

// saveToEnv —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ .env —Ñ–∞–π–ª
func (c *CLI) saveToEnv() error {
	file, err := os.Create(".env")
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	fmt.Fprintf(writer, "# OpenAI API –∫–ª—é—á (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n")
	fmt.Fprintf(writer, "OPENAI_API_KEY=%s\n\n", c.config.OpenAIAPIKey)

	fmt.Fprintf(writer, "# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤\n")
	fmt.Fprintf(writer, "ROOT_DIR=%s\n\n", c.config.RootDir)

	fmt.Fprintf(writer, "# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n")
	fmt.Fprintf(writer, "FILE_EXTENSIONS=%s\n\n", strings.Join(c.config.FileExtensions, ","))

	fmt.Fprintf(writer, "# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
	fmt.Fprintf(writer, "DB_PATH=%s\n\n", c.config.DBPath)

	fmt.Fprintf(writer, "# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏\n")
	fmt.Fprintf(writer, "N_COMMITS=%d\n\n", c.config.NCommits)

	fmt.Fprintf(writer, "# –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤\n")
	fmt.Fprintf(writer, "TOKEN_LIMIT=%d\n\n", c.config.TokenLimit)

	fmt.Fprintf(writer, "# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, warn, error)\n")
	fmt.Fprintf(writer, "LOG_LEVEL=%s\n", c.config.LogLevel)

	return writer.Flush()
}

// maskAPIKey –º–∞—Å–∫–∏—Ä—É–µ—Ç API –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func maskAPIKey(apiKey string) string {
	if len(apiKey) <= 8 {
		return "***"
	}
	return apiKey[:4] + "..." + apiKey[len(apiKey)-4:]
}

// exportToCSV —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
func (c *CLI) exportToCSV() error {
	color.Cyan("üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV")
	fmt.Println()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	if _, err := os.Stat(c.config.DBPath); os.IsNotExist(err) {
		color.Red("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", c.config.DBPath)
		color.Yellow("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å—Ç–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤")
		fmt.Println()
		return nil
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
	color.Yellow("üìÅ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞")
	prompt := promptui.Prompt{
		Label:   "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: export.csv)",
		Default: "embeddings_export.csv",
	}
	outputPath, err := prompt.Run()
	if err != nil {
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(outputPath); err == nil {
		color.Yellow("‚ö†Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", outputPath)
		confirmPrompt := promptui.Select{
			Label: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª?",
			Items: []string{"‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"},
		}
		_, result, err := confirmPrompt.Run()
		if err != nil {
			return err
		}
		if strings.Contains(result, "–ù–µ—Ç") {
			color.Yellow("üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω")
			fmt.Println()
			return nil
		}
	}

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
	app := app.New(c.config)
	if err := app.InitializeDatabase(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: cleanup() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

	// –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
	color.Yellow("üì§ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç...")
	if err := app.ExportDatabaseToCSV(outputPath); err != nil {
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	if fileInfo, err := os.Stat(outputPath); err == nil {
		color.Green("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
		fmt.Printf("üìÅ –§–∞–π–ª: %s\n", outputPath)
		fmt.Printf("üìä –†–∞–∑–º–µ—Ä: %.2f –ú–ë\n", float64(fileInfo.Size())/1024/1024)
		fmt.Println()
		color.Cyan("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
		color.Cyan("   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets")
		color.Cyan("   ‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã")
		color.Cyan("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã")
		fmt.Println()
	}

	return nil
}
