package app

import (
	"context"
	"crypto/md5"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/schollz/progressbar/v3"
	"github.com/sirupsen/logrus"

	"gokb-embedder/internal/config"
	"gokb-embedder/internal/database"
	"gokb-embedder/internal/git"
	"gokb-embedder/internal/models"
	"gokb-embedder/internal/openai"
	"gokb-embedder/internal/parsers"
	"gokb-embedder/internal/scanner"
)

// App –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type App struct {
	config     *config.Config
	logger     *logrus.Logger
	database   *database.Database
	openai     *openai.Client
	scanner    *scanner.Scanner
	parsers    *parsers.ParserRegistry
	gitService *git.GitService
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func New(cfg *config.Config) *App {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	logger := logrus.New()
	logger.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
	})

	level := logrus.InfoLevel
	if cfg != nil {
		if parsedLevel, err := logrus.ParseLevel(cfg.LogLevel); err == nil {
			level = parsedLevel
		}
	}
	logger.SetLevel(level)

	return &App{
		config:  cfg,
		logger:  logger,
		parsers: parsers.NewParserRegistry(),
	}
}

// UpdateConfig –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (r *App) UpdateConfig(cfg *config.Config) {
	r.config = cfg
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (r *App) Run() error {
	r.logger.Info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	if err := r.initialize(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}
	defer r.cleanup()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
	files, err := r.scanFiles()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	filesToProcess, err := r.checkFileChanges(files)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	if len(filesToProcess) == 0 {
		r.logger.Info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
	if err := r.processFiles(filesToProcess); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	r.logger.Info("‚úÖ –ì–æ—Ç–æ–≤–æ! –≠–º–±–µ–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ " + r.config.DBPath)
	return nil
}

// RunPreprocess –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
func (r *App) RunPreprocess() error {
	r.logger.Info("üìù –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	if err := r.initialize(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}
	defer r.cleanup()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
	files, err := r.scanFiles()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	filesToProcess, err := r.checkFileChanges(files)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	if len(filesToProcess) == 0 {
		r.logger.Info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
	if err := r.processFilesWithoutEmbeddings(filesToProcess); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	r.logger.Info("‚úÖ –ì–æ—Ç–æ–≤–æ! –ë–ª–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ " + r.config.DBPath)
	return nil
}

// initialize –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (r *App) initialize() error {
	r.logger.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
	r.logger.Infof("üìÅ ROOT_DIR: %s", r.config.RootDir)
	r.logger.Infof("üìù FILE_EXTENSIONS: %v", r.config.FileExtensions)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	db, err := database.NewDatabase(r.config.DBPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	r.database = db
	r.logger.Debug("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞...")
	r.openai = openai.NewClient(r.config.OpenAIAPIKey)
	r.logger.Debug("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞...")
	r.scanner = scanner.NewScanner(r.config.RootDir, r.config.FileExtensions)
	if r.scanner == nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫–∞–Ω–µ—Ä")
	}
	r.logger.Debug("‚úÖ –°–∫–∞–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω")

	if err := r.scanner.LoadGitignore(); err != nil {
		r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .gitignore: %v", err)
	} else {
		r.logger.Debug("‚úÖ .gitignore –∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
	r.logger.Debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤...")
	r.registerParsers()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Å–µ—Ä–≤–∏—Å (–µ—Å–ª–∏ —ç—Ç–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
	r.logger.Debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
	if git.IsGitRepository(r.config.RootDir) {
		r.logger.Debug("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Å–µ—Ä–≤–∏—Å–∞...")
		gitService, err := git.NewGitService(r.config.RootDir)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Å–µ—Ä–≤–∏—Å: %v", err)
		} else {
			r.gitService = gitService
			r.logger.Debug("‚úÖ Git —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		}
	} else {
		r.logger.Debug("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, Git —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	r.logger.Info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	return nil
}

// InitializeDatabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (r *App) InitializeDatabase() error {
	r.logger.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	db, err := database.NewDatabase(r.config.DBPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	r.database = db
	r.logger.Debug("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

	return nil
}

// InitializeForEmbeddings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ OpenAI –∫–ª–∏–µ–Ω—Ç
func (r *App) InitializeForEmbeddings() error {
	r.logger.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	db, err := database.NewDatabase(r.config.DBPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	r.database = db
	r.logger.Debug("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
	r.logger.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞...")
	r.openai = openai.NewClient(r.config.OpenAIAPIKey)
	r.logger.Debug("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	return nil
}

// cleanup –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
func (r *App) cleanup() {
	if r.database != nil {
		if err := r.database.Close(); err != nil {
			r.logger.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
		}
	}
}

// registerParsers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
func (r *App) registerParsers() {
	r.logger.Debug("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–æ–≤...")

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	selectedExtensions := make(map[string]bool)
	for _, ext := range r.config.FileExtensions {
		selectedExtensions[ext] = true
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Python –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã .py —Ñ–∞–π–ª—ã)
	if selectedExtensions[".py"] {
		r.logger.Debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Python –ø–∞—Ä—Å–µ—Ä–∞...")
		pythonParser := parsers.NewPythonParser()
		if pythonParser == nil {
			r.logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Python –ø–∞—Ä—Å–µ—Ä")
		} else {
			r.parsers.Register(pythonParser)
			r.logger.Debugf("‚úÖ Python –ø–∞—Ä—Å–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", pythonParser.GetName())
		}
	} else {
		r.logger.Debug("‚è≠Ô∏è Python –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∞–π–ª—ã .py –Ω–µ –≤—ã–±—Ä–∞–Ω—ã)")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º JavaScript –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã JS/TS —Ñ–∞–π–ª—ã)
	if selectedExtensions[".js"] {
		r.logger.Debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è JavaScript –ø–∞—Ä—Å–µ—Ä–∞...")
		javascriptParser := parsers.NewJavaScriptParser()
		if javascriptParser == nil {
			r.logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å JavaScript –ø–∞—Ä—Å–µ—Ä")
		} else {
			r.parsers.Register(javascriptParser)
			r.logger.Debugf("‚úÖ JavaScript –ø–∞—Ä—Å–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", javascriptParser.GetName())
		}
	} else {
		r.logger.Debug("‚è≠Ô∏è JavaScript –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω (JS —Ñ–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã)")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º PHP –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã .php —Ñ–∞–π–ª—ã)
	if selectedExtensions[".php"] {
		r.logger.Debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è PHP –ø–∞—Ä—Å–µ—Ä–∞...")
		phpParser := parsers.NewPHPParser()
		if phpParser == nil {
			r.logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PHP –ø–∞—Ä—Å–µ—Ä")
		} else {
			r.parsers.Register(phpParser)
			r.logger.Debugf("‚úÖ PHP –ø–∞—Ä—Å–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", phpParser.GetName())
		}
	} else {
		r.logger.Debug("‚è≠Ô∏è PHP –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∞–π–ª—ã .php –Ω–µ –≤—ã–±—Ä–∞–Ω—ã)")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
	textExtensions := []string{".md", ".yml", ".yaml", ".conf", ".txt"}
	hasTextFiles := false
	for _, ext := range textExtensions {
		if selectedExtensions[ext] {
			hasTextFiles = true
			break
		}
	}

	if hasTextFiles {
		r.logger.Debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")
		textParser := parsers.NewTextParser(r.config.TokenLimit)
		if textParser == nil {
			r.logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä")
		} else {
			r.parsers.Register(textParser)
			r.logger.Debugf("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", textParser.GetName())
		}
	} else {
		r.logger.Debug("‚è≠Ô∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã)")
	}

	allParsers := r.parsers.GetAllParsers()
	r.logger.Infof("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: %d", len(allParsers))

	for _, parser := range allParsers {
		r.logger.Debugf("  - %s", parser.GetName())
	}
}

// scanFiles —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
func (r *App) scanFiles() ([]string, error) {
	r.logger.Info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")

	if r.scanner == nil {
		return nil, fmt.Errorf("—Å–∫–∞–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	r.logger.Debugf("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s", r.config.RootDir)
	r.logger.Debugf("–ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: %v", r.config.FileExtensions)

	files, err := r.scanner.ScanFiles()
	if err != nil {
		r.logger.Errorf("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %v", err)
		return nil, err
	}

	r.logger.Infof("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", len(files))
	if len(files) == 0 {
		r.logger.Warn("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
		r.logger.Warn("  - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ ROOT_DIR")
		r.logger.Warn("  - –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏")
		r.logger.Warn("  - –ü—Ä–∞–≤–∏–ª–∞ .gitignore")
	} else {
		r.logger.Debug("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
		for i, file := range files {
			if i < 10 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
				r.logger.Debugf("  - %s", file)
			} else if i == 10 {
				r.logger.Debugf("  ... –∏ –µ—â—ë %d —Ñ–∞–π–ª–æ–≤", len(files)-10)
				break
			}
		}
	}

	return files, nil
}

// checkFileChanges –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
func (r *App) checkFileChanges(files []string) ([]string, error) {
	r.logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤...")

	var filesToProcess []string

	for _, file := range files {
		fullPath := filepath.Join(r.config.RootDir, file)

		// –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
		fileHash, err := r.getFileHash(fullPath)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		storedHash, err := r.database.GetFileHash(file)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ö–µ—à –¥–ª—è %s: %v", file, err)
		}

		// –ï—Å–ª–∏ —Ö–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
		if storedHash == "" || storedHash != fileHash {
			filesToProcess = append(filesToProcess, file)

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
			if storedHash != "" {
				if err := r.database.DeleteFileBlocks(file); err != nil {
					r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –¥–ª—è %s: %v", file, err)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
			if err := r.database.UpdateFileHash(file, fileHash); err != nil {
				r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ö–µ—à –¥–ª—è %s: %v", file, err)
			}
		}
	}

	r.logger.Infof("üìù –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d", len(filesToProcess))
	for _, file := range filesToProcess {
		r.logger.Debugf("  - %s", file)
	}

	return filesToProcess, nil
}

// processFiles –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏
func (r *App) processFiles(files []string) error {
	r.logger.Info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")

	var allBlocks []*models.CodeBlock

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(files)), "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")

	for _, file := range files {
		bar.Add(1)

		fullPath := filepath.Join(r.config.RootDir, file)
		ext := filepath.Ext(file)

		// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
		parser, found := r.parsers.GetParser(ext)
		if !found {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ %s", file)
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
		blocks, err := parser.ParseFile(fullPath)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
		for _, block := range blocks {
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
			block.SetRelativePath(file)

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
			if r.gitService != nil {
				commitMessages, err := r.gitService.GetLastCommitMessages(fullPath, r.config.NCommits)
				if err != nil {
					r.logger.Debugf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –¥–ª—è %s: %v", file, err)
				} else {
					block.SetCommitMessages(commitMessages)
				}
			}
		}

		allBlocks = append(allBlocks, blocks...)
	}

	bar.Finish()
	r.logger.Infof("üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞: %d", len(allBlocks))

	// –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–∏–Ω–≥–∏
	return r.createEmbeddings(allBlocks)
}

// processFilesWithoutEmbeddings –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
func (r *App) processFilesWithoutEmbeddings(files []string) error {
	r.logger.Info("üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤)...")

	var allBlocks []*models.CodeBlock

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(files)), "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")

	for _, file := range files {
		bar.Add(1)

		fullPath := filepath.Join(r.config.RootDir, file)
		ext := filepath.Ext(file)

		// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
		parser, found := r.parsers.GetParser(ext)
		if !found {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ %s", file)
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
		blocks, err := parser.ParseFile(fullPath)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
		for _, block := range blocks {
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
			block.SetRelativePath(file)

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
			if r.gitService != nil {
				commitMessages, err := r.gitService.GetLastCommitMessages(fullPath, r.config.NCommits)
				if err != nil {
					r.logger.Debugf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –¥–ª—è %s: %v", file, err)
				} else {
					block.SetCommitMessages(commitMessages)
				}
			}
		}

		allBlocks = append(allBlocks, blocks...)
	}

	bar.Finish()
	r.logger.Infof("üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d", len(allBlocks))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
	return r.saveBlocksWithoutEmbeddings(allBlocks)
}

// saveBlocksWithoutEmbeddings —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–ª–æ–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
func (r *App) saveBlocksWithoutEmbeddings(blocks []*models.CodeBlock) error {
	r.logger.Info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(blocks)), "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤")

	for _, block := range blocks {
		bar.Add(1)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–ª–æ–∫
		exists, err := r.database.BlockExists(block)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞: %v", err)
			continue
		}
		if exists {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
		embeddingText := block.GetEmbeddingText()

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–∞
		if err := r.database.SaveBlockWithoutEmbedding(block, embeddingText); err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}
	}

	bar.Finish()
	return nil
}

// GenerateEmbeddingsOnly –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–ª–æ–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
func (r *App) GenerateEmbeddingsOnly() error {
	r.logger.Info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤...")

	// –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
	blocks, err := r.database.GetBlocksWithoutEmbeddings()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤: %w", err)
	}

	if len(blocks) == 0 {
		r.logger.Info("‚úÖ –í—Å–µ –±–ª–æ–∫–∏ —É–∂–µ –∏–º–µ—é—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏!")
		return nil
	}

	r.logger.Infof("üì¶ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤: %d", len(blocks))

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Minute)
	defer cancel()

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(blocks)), "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")

	for _, block := range blocks {
		bar.Add(1)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
		embeddingText := block.GetEmbeddingText()

		// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		embedding, err := r.openai.GetEmbedding(ctx, embeddingText)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		if err := r.database.UpdateEmbedding(block, embedding); err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}
	}

	bar.Finish()
	return nil
}

// ShowDatabaseStatistics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (r *App) ShowDatabaseStatistics() error {
	r.logger.Info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

	stats, err := r.database.GetStatistics()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %w", err)
	}

	r.logger.Infof("üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: %d", stats["file_count"])
	r.logger.Infof("üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: %d", stats["total_blocks"])
	r.logger.Infof("‚úÖ –ë–ª–æ–∫–æ–≤ —Å —ç–º–±–µ–¥–∏–Ω–≥–∞–º–∏: %d", stats["blocks_with_embeddings"])
	r.logger.Infof("‚è≥ –ë–ª–æ–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤: %d", stats["blocks_without_embeddings"])

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –±–ª–æ–∫–æ–≤
	if blockTypes, ok := stats["block_types"].(map[string]int); ok {
		r.logger.Info("üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –±–ª–æ–∫–æ–≤:")
		for blockType, count := range blockTypes {
			r.logger.Infof("   ‚Ä¢ %s: %d", blockType, count)
		}
	}

	return nil
}

// createEmbeddings —Å–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏ –¥–ª—è –±–ª–æ–∫–æ–≤
func (r *App) createEmbeddings(blocks []*models.CodeBlock) error {
	r.logger.Info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤...")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Minute)
	defer cancel()

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(blocks)), "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")

	for _, block := range blocks {
		bar.Add(1)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–ª–æ–∫
		exists, err := r.database.BlockExists(block)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞: %v", err)
			continue
		}
		if exists {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
		embeddingText := block.GetEmbeddingText()

		// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		embedding, err := r.openai.GetEmbedding(ctx, embeddingText)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		if err := r.database.SaveEmbedding(block, embedding, embeddingText); err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}
	}

	bar.Finish()
	return nil
}

// getFileHash –ø–æ–ª—É—á–∞–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞
func (r *App) getFileHash(filePath string) (string, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return "", err
	}

	hash := md5.Sum(data)
	return fmt.Sprintf("%x", hash), nil
}
