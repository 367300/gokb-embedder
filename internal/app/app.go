package app

import (
	"context"
	"crypto/md5"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/schollz/progressbar/v3"
	"github.com/sirupsen/logrus"

	"gokb-embedder/internal/config"
	"gokb-embedder/internal/database"
	"gokb-embedder/internal/git"
	"gokb-embedder/internal/models"
	"gokb-embedder/internal/openai"
	"gokb-embedder/internal/parsers"
	"gokb-embedder/internal/scanner"
)

// App –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type App struct {
	config     *config.Config
	logger     *logrus.Logger
	database   *database.Database
	openai     *openai.Client
	scanner    *scanner.Scanner
	parsers    *parsers.ParserRegistry
	gitService *git.GitService
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func New(cfg *config.Config) *App {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	logger := logrus.New()
	logger.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
	})

	level, err := logrus.ParseLevel(cfg.LogLevel)
	if err != nil {
		level = logrus.InfoLevel
	}
	logger.SetLevel(level)

	return &App{
		config:  cfg,
		logger:  logger,
		parsers: parsers.NewParserRegistry(),
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (r *App) Run() error {
	r.logger.Info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	if err := r.initialize(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}
	defer r.cleanup()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
	files, err := r.scanFiles()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	filesToProcess, err := r.checkFileChanges(files)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	if len(filesToProcess) == 0 {
		r.logger.Info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
	if err := r.processFiles(filesToProcess); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	r.logger.Info("‚úÖ –ì–æ—Ç–æ–≤–æ! –≠–º–±–µ–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ " + r.config.DBPath)
	return nil
}

// initialize –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (r *App) initialize() error {
	r.logger.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	db, err := database.NewDatabase(r.config.DBPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	r.database = db

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
	r.openai = openai.NewClient(r.config.OpenAIAPIKey)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä
	r.scanner = scanner.NewScanner(r.config.RootDir, r.config.FileExtensions)
	if err := r.scanner.LoadGitignore(); err != nil {
		r.logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .gitignore")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
	r.registerParsers()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Å–µ—Ä–≤–∏—Å (–µ—Å–ª–∏ —ç—Ç–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
	if git.IsGitRepository(r.config.RootDir) {
		gitService, err := git.NewGitService(r.config.RootDir)
		if err != nil {
			r.logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Å–µ—Ä–≤–∏—Å")
		} else {
			r.gitService = gitService
		}
	}

	return nil
}

// cleanup –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
func (r *App) cleanup() {
	if r.database != nil {
		if err := r.database.Close(); err != nil {
			r.logger.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
		}
	}
}

// registerParsers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
func (r *App) registerParsers() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Python –ø–∞—Ä—Å–µ—Ä
	pythonParser := parsers.NewPythonParser()
	r.parsers.Register(pythonParser)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
	textParser := parsers.NewTextParser(r.config.TokenLimit)
	r.parsers.Register(textParser)

	r.logger.Infof("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: %d", len(r.parsers.GetAllParsers()))
}

// scanFiles —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
func (r *App) scanFiles() ([]string, error) {
	r.logger.Info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")

	files, err := r.scanner.ScanFiles()
	if err != nil {
		return nil, err
	}

	r.logger.Infof("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", len(files))
	return files, nil
}

// checkFileChanges –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
func (r *App) checkFileChanges(files []string) ([]string, error) {
	r.logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤...")

	var filesToProcess []string

	for _, file := range files {
		fullPath := filepath.Join(r.config.RootDir, file)

		// –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
		fileHash, err := r.getFileHash(fullPath)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		storedHash, err := r.database.GetFileHash(file)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ö–µ—à –¥–ª—è %s: %v", file, err)
		}

		// –ï—Å–ª–∏ —Ö–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
		if storedHash == "" || storedHash != fileHash {
			filesToProcess = append(filesToProcess, file)

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
			if storedHash != "" {
				if err := r.database.DeleteFileBlocks(file); err != nil {
					r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –¥–ª—è %s: %v", file, err)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
			if err := r.database.UpdateFileHash(file, fileHash); err != nil {
				r.logger.Warnf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ö–µ—à –¥–ª—è %s: %v", file, err)
			}
		}
	}

	r.logger.Infof("üìù –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d", len(filesToProcess))
	for _, file := range filesToProcess {
		r.logger.Debugf("  - %s", file)
	}

	return filesToProcess, nil
}

// processFiles –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏
func (r *App) processFiles(files []string) error {
	r.logger.Info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")

	var allBlocks []*models.CodeBlock

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(files)), "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")

	for _, file := range files {
		bar.Add(1)

		fullPath := filepath.Join(r.config.RootDir, file)
		ext := filepath.Ext(file)

		// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
		parser, found := r.parsers.GetParser(ext)
		if !found {
			r.logger.Warnf("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ %s", file)
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
		blocks, err := parser.ParseFile(fullPath)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
		if r.gitService != nil {
			commitMessages, err := r.gitService.GetLastCommitMessages(fullPath, r.config.NCommits)
			if err != nil {
				r.logger.Debugf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –¥–ª—è %s: %v", file, err)
			} else {
				for _, block := range blocks {
					block.SetCommitMessages(commitMessages)
				}
			}
		}

		allBlocks = append(allBlocks, blocks...)
	}

	bar.Finish()
	r.logger.Infof("üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞: %d", len(allBlocks))

	// –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–∏–Ω–≥–∏
	return r.createEmbeddings(allBlocks)
}

// createEmbeddings —Å–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥–∏–Ω–≥–∏ –¥–ª—è –±–ª–æ–∫–æ–≤
func (r *App) createEmbeddings(blocks []*models.CodeBlock) error {
	r.logger.Info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤...")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Minute)
	defer cancel()

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.Default(int64(len(blocks)), "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")

	for _, block := range blocks {
		bar.Add(1)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–ª–æ–∫
		exists, err := r.database.BlockExists(block)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞: %v", err)
			continue
		}
		if exists {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
		embeddingText := block.GetEmbeddingText()

		// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		embedding, err := r.openai.GetEmbedding(ctx, embeddingText)
		if err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–∏–Ω–≥
		if err := r.database.SaveEmbedding(block, embedding, embeddingText); err != nil {
			r.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–∞ –¥–ª—è –±–ª–æ–∫–∞ %s: %v", block, err)
			continue
		}
	}

	bar.Finish()
	return nil
}

// getFileHash –ø–æ–ª—É—á–∞–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞
func (r *App) getFileHash(filePath string) (string, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return "", err
	}

	hash := md5.Sum(data)
	return fmt.Sprintf("%x", hash), nil
}
