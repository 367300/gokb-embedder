package scanner

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// Scanner –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
type Scanner struct {
	rootDir           string
	fileExtensions    []string
	gitignorePatterns []string
}

// NewScanner —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤
func NewScanner(rootDir string, fileExtensions []string) *Scanner {
	return &Scanner{
		rootDir:        rootDir,
		fileExtensions: fileExtensions,
	}
}

// LoadGitignore –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ .gitignore —Ñ–∞–π–ª–∞
func (s *Scanner) LoadGitignore() error {
	gitignorePath := filepath.Join(s.rootDir, ".gitignore")

	file, err := os.Open(gitignorePath)
	if err != nil {
		// .gitignore –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
		return nil
	}
	defer file.Close()

	var patterns []string
	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}

	s.gitignorePatterns = patterns
	return scanner.Err()
}

// ScanFiles —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func (s *Scanner) ScanFiles() ([]string, error) {
	var files []string
	var totalFiles, matchedFiles, ignoredFiles int

	fmt.Printf("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤: %s\n", s.rootDir)
	fmt.Printf("üìù –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: %v\n", s.fileExtensions)
	fmt.Printf("üö´ Gitignore –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: %d\n", len(s.gitignorePatterns))

	err := filepath.Walk(s.rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		if info.IsDir() {
			return nil
		}

		totalFiles++
		ext := filepath.Ext(path)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		if !contains(s.fileExtensions, ext) {
			return nil
		}

		matchedFiles++

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
		if s.shouldIgnoreFile(path) {
			ignoredFiles++
			return nil
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
		relPath, err := filepath.Rel(s.rootDir, path)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏: %w", err)
		}

		files = append(files, relPath)
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %w", err)
	}

	fmt.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
	fmt.Printf("  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: %d\n", totalFiles)
	fmt.Printf("  - –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: %d\n", matchedFiles)
	fmt.Printf("  - –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ .gitignore: %d\n", ignoredFiles)
	fmt.Printf("  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d\n", len(files))

	return files, nil
}

// shouldIgnoreFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
func (s *Scanner) shouldIgnoreFile(filePath string) bool {
	relPath, err := filepath.Rel(s.rootDir, filePath)
	if err != nil {
		return false
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—É—Ç–µ–π
	relPath = strings.ReplaceAll(relPath, "\\", "/")

	for _, pattern := range s.gitignorePatterns {
		if s.matchesPattern(relPath, pattern) {
			return true
		}
	}

	return false
}

// matchesPattern –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—É
func (s *Scanner) matchesPattern(path, pattern string) bool {
	// –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
	if strings.HasPrefix(pattern, "/") {
		pattern = pattern[1:]
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
	if s.globMatch(path, pattern) {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if strings.HasSuffix(pattern, "/") {
		dirPattern := pattern[:len(pattern)-1] // —É–±–∏—Ä–∞–µ–º trailing slash
		pathParts := strings.Split(path, "/")
		for _, part := range pathParts {
			if part == dirPattern {
				return true
			}
		}
	} else {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		if strings.HasPrefix(path, pattern+"/") {
			return true
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
		if path == pattern {
			return true
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –≤ –ø—É—Ç–∏
		pathParts := strings.Split(path, "/")
		for _, part := range pathParts {
			if part == pattern {
				return true
			}
		}
	}

	return false
}

// globMatch –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É—Ç–∏ glob-–ø–∞—Ç—Ç–µ—Ä–Ω—É
func (s *Scanner) globMatch(path, pattern string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è glob-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É

	// –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ .*
	pattern = strings.ReplaceAll(pattern, "*", ".*")

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
	pattern = "^" + pattern + "$"

	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å regexp)
	return strings.Contains(path, strings.ReplaceAll(pattern, ".*", ""))
}

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–∞–π—Å–µ
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
